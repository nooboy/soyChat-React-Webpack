#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('a:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//新增socket.io模块
var io = require('socket.io')(server);

io.on('connection', function(socket){
  //接受客户端传送的sendMessage命令
  socket.on('sendMessage', function(ioUserInfo,msg){
      console.log(ioUserInfo);  //用户ioUserInfo
      console.log(msg);  //接受用户发送的信息

      //通过接受sendMessage这个action的数据再广播给所有'订阅的人'(即on了这个事件的)
      socket.broadcast.emit('getMessage', ioUserInfo, msg); //注意接收和发送方法的对象不一样
      //io.sockets是发送给所有人
      //socket.broadcast是发送除自己外的人
  });
})


// server = new WebpackDevServer(compiler, {
//     publicPath: config.output.publicPath,
//     stats: {
//         colors: true
//     }
// });
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,function(){
  console.log('Server on port:' + port)
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
